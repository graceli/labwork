# Note: use of decorators would be appropriate here
# def build_plot_data_nonpolar(h5file, tables, filter_func=filter_nonpolar):
# 	""" Builds a list of data for each given table to be plotted
# 		This changes depending on the analysis """
# 	
# 	#read chain tables and reorder data according to the residue mapping
# 	data_all = []
# 	chain_num=1
# 	for table in tables:
# 		print table
# 		datatable = h5file.getNode(table).read()
# 		# print datatable.dtype
# 		row_size = len(datatable[0])
# 		# print "build_plot_data:", row_size
# 		data_matrix = datatable.view(dtype=numpy.float64).reshape(-1, row_size)
# 		# print data_matrix
# 		nrows, ncols = data_matrix.shape
# 		
# 		print "data matrix has dimensions", data_matrix.shape
# 		print "data_matrix", data_matrix
# 
# 		data_sum = numpy.sum(filter_func(data_matrix), axis=0)/float(nrows)
# 		data_sum_reordered = reorder(data_sum, chain_num)
# 		data_all.append(data_sum_reordered)
# 		chain_num+=1
# 
# 	return data_all
# 
# def build_plot_data_polar(h5file, tables, filter_func=filter_nonpolar):
# 	""" Builds a list of data for each given table to be plotted
# 		This changes depending on the analysis """
# 
# 	#read chain tables and reorder data according to the residue mapping	
# 	data_all = []
# 	chain_num=1
# 	for table in tables:
# 		print table
# 		datatable = h5file.getNode(table).read()
# 		# print datatable.dtype
# 		row_size = len(datatable[0])
# 		# print "build_plot_data:", row_size
# 		data_matrix = datatable.view(dtype=numpy.float64).reshape(-1, row_size)
# 		# print data_matrix
# 		nrows, ncols = data_matrix.shape
# 		data_sum = numpy.sum(filter_func(data_matrix), axis=0)/float(nrows)
# 		data_all.append(data_sum)
# 		chain_num += 1
# 
# 	return data_all